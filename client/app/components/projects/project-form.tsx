import { useMutation } from "@tanstack/react-query";
import { PlusIcon } from "lucide-react";
import { useState } from "react";
import { Button } from "~/components/ui/button";
import {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "~/components/ui/dialog";
import { Input } from "~/components/ui/input";
import { Label } from "~/components/ui/label";
import { useTRPC } from "~/lib/trpc.config";
import { Textarea } from "../ui/textarea";
import { toast } from "sonner";

export function ProjectForm({
  setReloadReq,
}: {
  setReloadReq: (val: boolean) => void;
}) {
  const [open, setOpen] = useState(false);
  const trpc = useTRPC();
  const [projectDetails, setProjectDetails] = useState<{
    projectTitle: string;
    projectDescription: string;
  }>({
    projectTitle: "Databridge",
    projectDescription: "A database instance management system",
  });
  const createNewProject = useMutation(
    trpc.projectRoutes.newProject.mutationOptions({
      onSuccess: () => {
        toast.success("Project created", {
          id: "project-creation-status",
        });
        setReloadReq(true);
        setOpen(false);
      },
      onError: (e) => {
        toast.error(e.message, {
          id: "project-creation-status",
        });
      },
    })
  );

  function handleCreateNewProject() {
    if (!projectDetails.projectTitle) return;

    toast.loading("Creating new projects", {
      id: "project-creation-status",
    });

    createNewProject.mutateAsync({
      ...projectDetails,
    });
  }

  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <form>
        <DialogTrigger asChild>
          <Button
            variant="outline"
            className="w-full border-dashed border-2 outline-0"
          >
            <PlusIcon />
            New Project
          </Button>
        </DialogTrigger>
        <DialogContent className="sm:max-w-[425px]">
          <DialogHeader>
            <DialogTitle>Create New Project </DialogTitle>
            <DialogDescription>
              Password will be autogenerated
            </DialogDescription>
          </DialogHeader>
          <div className="grid gap-4">
            <div className="grid gap-3">
              <Label htmlFor="project-title">Project Title</Label>
              <Input
                id="project-title"
                name="project-title"
                value={projectDetails.projectTitle}
                onChange={(e) => {
                  setProjectDetails({
                    ...projectDetails,
                    projectTitle: e.target.value,
                  });
                }}
              />
            </div>
          </div>
          <div className="grid gap-4">
            <div className="grid gap-3">
              <Label htmlFor="project-description">Project Description</Label>
              <Textarea
                id="project-description"
                name="project-description"
                value={projectDetails.projectDescription}
                onChange={(e) => {
                  setProjectDetails({
                    ...projectDetails,
                    projectDescription: e.target.value,
                  });
                }}
              />
            </div>
          </div>
          <DialogFooter>
            <DialogClose asChild>
              <Button variant="outline">Cancel</Button>
            </DialogClose>
            <Button
              type="submit"
              onClick={() => {
                handleCreateNewProject();
              }}
            >
              Save changes
            </Button>
          </DialogFooter>
        </DialogContent>
      </form>
    </Dialog>
  );
}
